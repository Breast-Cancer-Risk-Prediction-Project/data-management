comment2 = paste0(comment_symbol, '.data.warning')
# using the variable symbol and comment2 to change the data and leave a comment
data <- data %>% mutate(!!comment2 := ifelse( !(!!variable_symbol) %in% get_range_values(params$`Valid Values`),
ifelse(is.na(data[[comment2]]),
params$Comments,
paste(data[[comment2]], ' | ', params$Comments) ),
data[[comment2]]))
return(data)
}
}
# QC function to catch inconsistencies related to another variable's value
# for example, Parity has to be 0 if parous is 0
crossvalid1.warnings <- function(data, params){
print('==========> in crossvalid1.warnings')
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data)){
print(glue('{params$Variable} or {params$`Cross Variable 1`} not present in data set, skipping this QC step') )
return (data)
}
else {
message("variable: ", params$`Variable`, " Cross Variable 1: ", params$`Cross Variable 1`)
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = paste0(comment_symbol, '.data.warning')
data <- data %>%
mutate(!!comment2 := ifelse( !!variable_symbol  %in% get_range_values(params$`Valid Values`)
& !(!!crossvar1_symbol) %in% get_range_values(params$`Cross Variable 1 Value`),
ifelse( is.na(data[[comment2]]),
params$Comments,
paste(data[[comment2]], ' | ', params$Comments) ),
data[[comment2]]) )
return(data)
}
}
# QC function to catch inconsistencies related to two other values of variables
crossvalid2.warnings <- function(data, params){
print('=========> in crossvalid2.warnings')
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data) | !params$`Cross Variable 2` %in% names(data)){
print(glue('{params$Variable} or cross variables not present in data set, skipping this QC step') )
return (data)
}
else{
message("variable: ", params$`Variable`, " Cross Variable 1: ", params$`Cross Variable 1`, " Cross Variable 2: ", params$`Cross Variable 2`)
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
crossvar2_symbol = sym(params$`Cross Variable 2`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = paste0(comment_symbol, '.data.warning')
data <- data %>%
mutate(!!comment2 := ifelse(!!variable_symbol %in% get_range_values(params$`Valid Values`) & !(!!crossvar1_symbol) %in% get_range_values(params$`Cross Variable 1 Value`)
|!!variable_symbol %in% get_range_values(params$`Valid Values`) &!(!!crossvar2_symbol) %in% get_range_values(params$`Cross Variable 2 Value`),
ifelse(is.na(data[[comment2]]),
params$Comments,
paste(data[[comment2]], ' | ', params$Comments)),
data[[comment2]]) )
return(data)
}
}
# QC function to catch inconsistencies related to three other values of variables
crossvalid3.warnings <- function(data, params){
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data) | !params$`Cross Variable 2` %in% names(data)
| !params$`Cross Variable 3` %in% names(data) ){
print(glue('{params$Variable} or cross variables not present in data set, skipping this QC step') )
return(data)
}
else{
print("===========> in crossvalid3.warnings")
message("variable: ", params$`Variable`, "Cross Variable 1: ", params$`Cross Variable 1`, "Cross Variable 2: ", params$`Cross Variable 2`, "Cross Variable 3: ", params$`Cross Variable 3`)
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
crossvar2_symbol = sym(params$`Cross Variable 2`)
crossvar3_symbol = sym(params$`Cross Variable 3`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = paste0(comment_symbol, '.data.warning')
data <- data  %>%
mutate(!!comment2 := ifelse(  !!variable_symbol %in% get_range_values(params$`Valid Values`) & !(!!crossvar1_symbol) %in% get_range_values(params$`Cross Variable 1 Value`)
|!!variable_symbol %in% get_range_values(params$`Valid Values`) & !(!!crossvar2_symbol) %in% get_range_values(params$`Cross Variable 2 Value`)
|!!variable_symbol %in% get_range_values(params$`Valid Values`) & !(!!crossvar3_symbol) %in% get_range_values(params$`Cross Variable 3 Value`),
ifelse(is.na(data[[comment2]]),
params$Comments,
paste(data[[comment2]], ' | ', params$Comments) ),
data[[comment2]] )  )
return(data)
}
}
# QC function to catch inconsistencies related to four other values of variables
crossvalid4.warnings <- function(data, params){
print("===========> in crossvalid4.warnings")
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data) | !params$`Cross Variable 2` %in% names(data)
| !params$`Cross Variable 3` %in% names(data) | !params$`Cross Variable 4` %in% names(data)){
print(glue('{params$Variable} or cross variables not present in data set, skipping this QC step') )
return(data)
}
else{
message("variable: ", params$`Variable`, "Cross Variable 1: ", params$`Cross Variable 1`, "Cross Variable 2: ", params$`Cross Variable 2`)
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
crossvar2_symbol = sym(params$`Cross Variable 2`)
crossvar3_symbol = sym(params$`Cross Variable 3`)
crossvar4_symbol = sym(params$`Cross Variable 4`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = paste0(comment_symbol, '.data.warning')
data <- data  %>%
mutate(!!comment2 := ifelse(  !!variable_symbol %in% get_range_values(params$`Valid Values`) & !(!!crossvar1_symbol) %in% get_range_values(params$`Cross Variable 1 Value`)
|!!variable_symbol %in% get_range_values(params$`Valid Values`) & !(!!crossvar2_symbol) %in% get_range_values(params$`Cross Variable 2 Value`)
|!!variable_symbol %in% get_range_values(params$`Valid Values`) & !(!!crossvar3_symbol) %in% get_range_values(params$`Cross Variable 3 Value`)
|!!variable_symbol %in% get_range_values(params$`Valid Values`) & !(!!crossvar4_symbol) %in% get_range_values(params$`Cross Variable 4 Value`),
ifelse(is.na(data[[comment2]]),
params$Comments,
paste(data[[comment2]], ' | ', params$Comments) ),
data[[comment2]] )  )
return(data)
}
}
# QC function to catch inconsistencies related to ranges which also depend on other cross variables
# for example, Parity can only be more than 0 if parous is 1
# in the case that parous is 1,
# a warning comment will be left if Parity is less than 1 or greater than 15
#crossrange.warnings<- function(data, params){
#print('===========> in crossrange.warnings')
#if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data) | !params$Formula_Variable %in% names(data)){
#print(glue('Either {params$Variable}, cross variables or {params$Formula_Variable} not present in data set, skipping this QC step') )
# return (data)
#} else{
#message("variable: ", params$`Variable`, "Cross Variable: ", params$`Cross Variable 1`)
#variable_symbol = sym(params$`Variable`)
#crossvar1_symbol = sym(params$`Cross Variable 1`)
# creating symbol for the comment variable
# comment_symbol = sym(params$Comment_Variable)
# creating comment column
#  comment2 = paste0(comment_symbol, '.data.warning')
#   if (any(grepl("[A-Za-z]", params$`Cross Variable 1 Value` ) == FALSE  ) ){
#      data <- data %>%
#        mutate( !!comment2 := ifelse( !!crossvar1_symbol %in% get_range_values(params$`Cross Variable 1 Value`)
#                                     & !(!!variable_symbol) %in% c(777,888)
#                                      & !(!!parse_expr(params$Formula_Condition)),
#                                      ifelse( is.na(data[[comment2]]), params$Comments, paste(data[[comment2]], ' | ', params$Comments) ),
#                                      data[[comment2]] ) )
#      return(data)
#    } else if (any(grepl('[^[:alnum:]]', params$`Cross Variable 1 Value`) == TRUE) ){
#      data <- data %>%
#        mutate( !!comment2 := ifelse( #!!crossvar1_symbol %in% get_range_values(params$`Cross Variable 1 Value`)
#          !!parse_expr(params$`Cross Variable 1 Value`)
#          & !(!!variable_symbol) %in% c(777,888)
#          & !(!!parse_expr(params$Formula_Condition)),
#          ifelse( is.na(data[[comment2]]), params$Comments, paste(data[[comment2]], ' | ', params$Comments) ),
#          data[[comment2]] ) )
#      return(data)
#    }
#  }
#}
crossrange.warnings <- function(data, params){
print('=====> in crossrange.warnings')
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data)
| any(!get_range_values(params$`Formula_Variable`) %in% names(data))  ){
print(glue('Either {params$Variable} or cross variables not present in data set, skipping this QC step') )
return(data)
# first if bracket closing
} else{
message("variable: ", params$`Variable`, " Cross Variable: ", params$`Cross Variable 1`)
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = sym(paste0(comment_symbol, '.data.warning'))
if (any(grepl("[A-Za-z]", params$`Cross Variable 1 Value` ) == FALSE  )  ){
data <- data %>%
mutate( formula_condition_fail = !(!!parse_expr(params$Formula_Condition)),
# NA values resulting from formula condition fail need to be set to FALSE
formula_condition_fail = if_else(is.na(formula_condition_fail), FALSE, formula_condition_fail),
!!comment2 := ifelse( !!crossvar1_symbol %in% get_range_values(params$`Cross Variable 1 Value`)
& formula_condition_fail,
ifelse( is.na({{comment2}}), params$Comments, paste({{comment2}}, ' | ', params$Comments) ),
{{comment2}}) )
return(data %>% select(-formula_condition_fail))
} # if bracket for no formula crossrange for numbers
else if (any(grepl('[^[:alnum:]]' , params$`Cross Variable 1 Value`) == TRUE ) ) {
# print(params$Comments)
data <- data %>%
mutate( formula_condition_fail = !(!!parse_expr(params$Formula_Condition)),
# NA values resulting from formula condition fail need to be set to FALSE
formula_condition_fail = if_else(is.na(formula_condition_fail), FALSE, formula_condition_fail),
cross_var_val_match = !!parse_expr(params$`Cross Variable 1 Value`),
cross_var_val_match = if_else(is.na(cross_var_val_match), FALSE, cross_var_val_match),
!!comment2 := ifelse( cross_var_val_match & formula_condition_fail,
ifelse( is.na({{comment2}}),
params$Comments,
paste({{comment2}}, ' | ', params$Comments) ),
{{comment2}}) )
#print(data %>% select(formula_condition_fail, cross_var_val_match, {{comment2}}) %>% slice(1) )
return(data %>% select(-c(formula_condition_fail, cross_var_val_match)) )
}# else bracket for formula
else {
data <- data %>%
mutate( formula_condition_fail = !(!!parse_expr(params$Formula_Condition)),
# NA values resulting from formula condition fail need to be set to FALSE
formula_condition_fail = if_else(is.na(formula_condition_fail), FALSE, formula_condition_fail),
!!comment2 := ifelse( !!crossvar1_symbol %in% get_range_values(params$`Cross Variable 1 Value`)
& formula_condition_fail,
ifelse( is.na({{comment2}}), params$Comments, paste({{comment2}}, ' | ', params$Comments) ),
{{comment2}} ) )
return(data %>% select(-formula_condition_fail))
}# else function for letters and no formula
} # second main else function, everything is under here
} #function close bracket
crossrange2.warnings<- function(data, params){
print('===========> in crossrange2.warnings')
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data) | !params$`Cross Variable 2` %in% names(data)
| any(!get_range_values(params$`Formula_Variable`) %in% names(data)) ){
print(glue('Either {params$Variable}, cross variables or formula variables not present in data set, skipping this QC step') )
return (data)
} else{
message("variable: ", params$`Variable`, "Cross Variable: ", params$`Cross Variable 1`, "Cross Variable 2: ", params$`Cross Variable 2`)
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
crossvar2_symbol = sym(params$`Cross Variable 2`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = sym(paste0(comment_symbol, '.data.warning') )
data <- data %>%
mutate(  formula_condition_fail = !(!!parse_expr(params$Formula_Condition)),
# NA values resulting from formula condition fail need to be set to FALSE
formula_condition_fail = if_else(is.na(formula_condition_fail), FALSE, formula_condition_fail),
cross_var_1_val_match = !!parse_expr(params$`Cross Variable 1 Value` ),
cross_var_1_val_match = ifelse(is.na(cross_var_1_val_match ), FALSE, cross_var_1_val_match ),
cross_var_2_val_match = !!parse_expr(params$`Cross Variable 2 Value` ),
cross_var_2_val_match = ifelse(is.na(cross_var_2_val_match), FALSE, cross_var_2_val_match),
!!comment2 := ifelse(cross_var_1_val_match & cross_var_2_val_match
& formula_condition_fail,
ifelse( is.na({{comment2}}), params$Comments, paste({{comment2}}, ' | ', params$Comments) ),
{{comment2}} ) )
return(data %>% select(-c(formula_condition_fail, cross_var_1_val_match, cross_var_2_val_match )) )
}
}
value_check.warnings <- function(data, params){
print('=======> in value_check.warnings')
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data)){
print( glue('{params$Variable} or cross variables not present in data set, skipping this QC step') )
return (data)
} else {
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = paste0(comment_symbol, '.data.warning')
data <- data %>%
mutate( !!comment2 := ifelse( !(!!variable_symbol) %in% c(777,888)
& !!variable_symbol > crossvar1_symbol,
ifelse(is.na(data[[comment2]]),params$Comments, paste(data[[comment2]], ' | ', params$Comments)),
data[[comment2]] ) )
return(data)
}
}
crossrange_not.warnings <- function(data, params){
print('=========> in crossrange_not.warnings')
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data)
| any(!get_range_values(params$`Formula_Variable`) %in% names(data) )) {
print(glue(' {params$Variable} or cross variables not present in data set, skipping this QC step') )
return (data)
} else {
message(" variable: " , params$Variable, " Cross Variable: " , params$`Cross Variable 1`)
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = sym(paste0(comment_symbol, '.data.warning') )
data <- data %>% mutate(  formula_condition_fail = !(!!parse_expr(params$Formula_Condition)),
# NA values resulting from formula condition fail need to be set to FALSE
formula_condition_fail = if_else(is.na(formula_condition_fail), FALSE, formula_condition_fail),
!!comment2 := ifelse(!(!!variable_symbol) %in% get_range_values(params$`Valid Values (Not)`)
& !(!!crossvar1_symbol %in% get_range_values(params$`Cross Variable 1 Value (Not)`))
& formula_condition_fail,
ifelse(is.na({{comment2}}),params$Comments, paste({{comment2}}, ' | ', params$Comments)),
{{comment2}}) )
return(data %>% select(-formula_condition_fail))
}
}
crossrange_not2.warnings <- function(data, params){
print('=============> in cross_range_not2.warnings')
if (!params$Variable %in% names(data) | !params$`Cross Variable 1` %in% names(data) | !params$`Cross Variable 2` %in% names(data)
| any(!get_range_values(params$`Formula_Variable`) %in% names(data))){
print(glue(' {params$Variable} or cross variables not present in data set, skipping this QC step') )
return (data)
} else {
message("variable: ", params$`Variable`, " Cross Variable: ", params$`Cross Variable 1`, " Cross Variable 2: ", params$`Cross Variable 2`)
variable_symbol = sym(params$`Variable`)
crossvar1_symbol = sym(params$`Cross Variable 1`)
crossvar2_symbol = sym(params$`Cross Variable 2`)
# creating symbol for the comment variable
comment_symbol = sym(params$Comment_Variable)
# creating comment column
comment2 = sym(paste0(comment_symbol, '.data.warning') )
data <- data %>% mutate(formula_condition_fail = !(!!parse_expr(params$Formula_Condition)),
# NA values resulting from formula condition fail need to be set to FALSE
formula_condition_fail = if_else(is.na(formula_condition_fail), FALSE, formula_condition_fail),
!!comment2 := ifelse(!(!!variable_symbol) %in% get_range_values(params$`Valid Values (Not)`)
& formula_condition_fail
& !(!!crossvar1_symbol) %in% get_range_values(params$`Cross Variable 1 Value (Not)`)
& !(!!crossvar2_symbol) %in% get_range_values(params$`Cross Variable 2 Value (Not)`),
ifelse(is.na({{comment2}}), params$Comments, paste({{comment2}}, ' | ', params$Comments)),
{{comment2}}) )
return(data %>% select(-formula_condition_fail) )
}
}
intdate.warnings <- function(data, params){
print('=============> in intdate.warnings')
if (!params$Variable %in% names(data) ){
print(glue('{params$Variable} not in data sets, skipping this QC step '))
return(data)
}
if(any(is.na(data$intDate_known))){
print(glue("{params$Variable} has at least one NA value, skipping this QC step"))
return(data)
}
if(any(is.na(data$intYear)) | any(is.na(data$intMonth)) | any(is.na(data$intDay)) |  !params$`Cross Variable 1` %in% names(data) |
!params$`Cross Variable 2` %in% names(data) | !params$`Cross Variable 3` %in% names(data) ){
print(glue("intDay, intMonth and intYear either have at least one NA value or are not in data, skipping this QC step"))
return(data)
}
else {
variable_symbol = sym(params$Variable)
crossvar1_symbol = sym(params$`Cross Variable 1`)
crossvar2_symbol = sym(params$`Cross Variable 2`)
crossvar3_symbol = sym(params$`Cross Variable 3`)
#creating comment column
comment2 =  paste0(sym(params$Comment_Variable), '.data.warning')
if (any(data$intDate_known == "Y") == TRUE ){
if(any(is.na(data$intYear) )| !params$`Cross Variable 1` %in% names(data)){
print(glue("intYear either has at least one NA value or is not in data, skipping this QC step"))
return(data)
}
else{
data <- data %>% mutate(!!comment2 := ifelse( !!variable_symbol != !!crossvar1_symbol
& !(!!variable_symbol) %in% c(777,888, 8000)
& !!crossvar1_symbol != 888,
ifelse(is.na(data[[comment2]]), params$Comments, paste(data[[comment2]], ' | ', params$Comments)),
data[[comment2]] ))
return(data)
}
}
if (any(data$intDate_known == "MY" ) == TRUE)  {
if(any(is.na(data$intYear)) | any(is.na(data$intMonth)) | !params$`Cross Variable 1` %in% names(data) |
!params$`Cross Variable 2` %in% names(data) ) {
print(glue("intYear or intMonth either have at least one NA value or are not in data, skipping this QC step"))
return(data)
}
else{
data <- data %>% mutate(!!comment2 := ifelse( year(lubridate::my(!!variable_symbol) ) != !!crossvar1_symbol
&!(year(lubridate::my(!!variable_symbol))) %in% c(777,888, 8000)
& !(!!crossvar1_symbol) %in% c(888, 8000)
| month(lubridate::my(!!variable_symbol) ) != !!crossvar2_symbol
&!(month(lubridate::my(!!variable_symbol))) %in% c(888)
& !!crossvar2_symbol != 888,
ifelse(is.na(data[[comment2]]), params$Comments, paste(data[[comment2]], ' | ', params$Comments)),
data[[comment2]] ))
return(data)
}
}
if (any(data$intDate_known == "DMY" ) == TRUE){
if(any(is.na(data$intYear)) | any(is.na(data$intMonth)) | any(is.na(data$intDay)) |  !params$`Cross Variable 1` %in% names(data) |
!params$`Cross Variable 2` %in% names(data) | !params$`Cross Variable 3` %in% names(data) ){
print(glue("intDay, intMonth and intYear either have at least one NA value or are not in data, skipping this QC step"))
return(data)
}
else{
data <- data %>% mutate(!!comment2 := ifelse( year(lubridate::dmy(!!variable_symbol) ) != !!crossvar1_symbol
&!(year(lubridate::dmy(!!variable_symbol))) %in% c(888, 8000)
& !(!!crossvar1_symbol) %in% c(888, 8000)
| month(lubridate::dmy(!!variable_symbol) ) != !!crossvar2_symbol
&!(month(lubridate::dmy(!!variable_symbol))) %in% c(888)
& !!crossvar2_symbol != 888
| day(lubridate::dmy(!!variable_symbol) ) != !!crossvar3_symbol
&!(day(lubridate::dmy(!!variable_symbol))) %in% c(888)
& !!crossvar3_symbol != 888,
ifelse(is.na(data[[comment2]]), params$Comments, paste(data[[comment2]], ' | ', params$Comments)),
data[[comment2]] ))
return(data)
}
}
}
}
# run one type of QC Type (Range, crossvalid,...)
# the rules are all the rules FOR THIS QC_TYPE
# the data is all the data.
# returns a subset of the data that is NOT valid according to the
# qa rules.
run_qa_type.warnings<-function(data,params){
rlang::exec(params$`QC Type`,data=data,params=params)
}
#' warnings_qc
#'
#' @param rules A tibble defining the how to validiate variables
#' @param data  The data being validated
#'
#' @return
#'
warnings_qc <- function(params, data){
orig<-options('dplyr.summarise.inform'=FALSE)
# in case this program is run multiple times on the same data
# existing flag columns will be removed first
data <- data %>% select(-ends_with("data.warning"))
data <- data %>% select(-starts_with("Comment"))
# create empty comment columns for every variable
data[paste0(names(data),'.data.warning')] <- NA
data <- data %>% select(-ends_with('.data.change.data.warning'))
#data <- data %>% mutate_if(is.logical, as.character)
res <- params %>% pmap(~list(...)) %>%
reduce(run_qa_type.warnings,.init=data) %>%
arrange.warning.comments() %>% # arranging comment columns next to the corresponding variable
arrange.all.comments()
#creating a list of warning column names that are empty because that value did not have any flags
empty_warning_columns <- res %>% select_if(function(x){all(is.na(x))}) %>% select(ends_with("data.warning")) %>% colnames()
# removing the list of column names from the data
res <- res %>% select(-all_of(empty_warning_columns))
options(orig)
#filtering rows where at least one comment has been added either for a change or flag
res <- res  %>% filter(!if_all(names(res %>% select(ends_with("data.change"),ends_with("data.warning"))), is.na) )
# adding extra columns for studies to make comments on
res <-res %>% reduce(.x = res %>% select(ends_with("data.change"), ends_with("data.warning"))  %>% colnames(),
.f = ~add_column(.x, "Comments from Study for {.y[1]}" := NA, .after = .y[1], .name_repair = "minimal"),
.init = res)
res
}
path_to_output <- file.path(tempdir())
# Reading core data
# put the name of the data Box file ID inside the quotation marks
core.data <- box_read("1331778159848")
# reading correction rules from Box
bcrpp.core.correction.rules <- box_read(996117218706)
# reading warning rules from Box
bcrpp.core.warning.rules <- box_read(996103073482)
# apply bcrpp correction rules to data
core.data.changes <- changes_qc(rules = bcrpp.core.correction.rules,
data = core.data)
# applying warning rules to data that already has changes made to core data
core.data.qc <- warnings_qc(params =bcrpp.core.warning.rules,
data = core.data.changes)
# Populate "study_name" with name of Study
core_summary_report(core.dict = core.data.dict, qc_df = core.data.qc, path_output = path_to_output, study_name = "WHI")
core.data.dict <- box_read(869084480019) %>% filter(Category == "Core")
# Populate "study_name" with name of Study
core_summary_report(core.dict = core.data.dict, qc_df = core.data.qc, path_output = path_to_output, study_name = "WHI")
list.files(path_to_output)
core_summary_report
paste0(path_to_output, "whi", "some.txt")
# Populate "study_name" with name of Study
core_summary_report(core.dict = core.data.dict, qc_df = core.data.qc, path_output = paste0(path_to_output, "/"), study_name = "WHI")
View(bcrpp.core.warning.rules)
core.data <- change_case_match(data_dict = core.data.dict, df = core.data)
# reading warning rules from Box
bcrpp.core.warning.rules <- box_read(996103073482)
# apply bcrpp correction rules to data
core.data.changes <- changes_qc(rules = bcrpp.core.correction.rules,
data = core.data)
# applying warning rules to data that already has changes made to core data
core.data.qc <- warnings_qc(params =bcrpp.core.warning.rules,
data = core.data.changes)
# reading correction rules from Box
bcrpp.core.correction.rules <- box_read(996117218706)
# reading warning rules from Box
bcrpp.core.warning.rules <- box_read(996103073482)
# apply bcrpp correction rules to data
core.data.changes <- changes_qc(rules = bcrpp.core.correction.rules,
data = core.data)
# applying warning rules to data that already has changes made to core data
core.data.qc <- warnings_qc(params =bcrpp.core.warning.rules,
data = core.data.changes)
View(bcrpp.core.warning.rules)
# reading warning rules from Box
bcrpp.core.warning.rules <- box_read(996103073482)
# applying warning rules to data that already has changes made to core data
core.data.qc <- warnings_qc(params =bcrpp.core.warning.rules,
data = core.data.changes)
# reading warning rules from Box
bcrpp.core.warning.rules <- box_read(996103073482)
bcrpp.core.warning.rules$Variable
# applying warning rules to data that already has changes made to core data
core.data.qc <- warnings_qc(params =bcrpp.core.warning.rules,
data = core.data.changes)
# Populate "study_name" with name of Study
core_summary_report(core.dict = core.data.dict, qc_df = core.data.qc, path_output = paste0(path_to_output, "/"), study_name = "WHI")
# Populate "study_name" with name of Study
core_summary_report(core.dict = core.data.dict, qc_df = core.data.qc, path_output = paste0(path_to_output, "/"), study_name = "WHI")
# Reading core data
# put the name of the data Box file ID inside the quotation marks
core.data <- box_read("969638017025")
core.data.dict <- box_read(869084480019) %>% filter(Category == "Core")
core.data <- change_case_match(data_dict = core.data.dict, df = core.data)
# reading correction rules from Box
bcrpp.core.correction.rules <- box_read(996117218706)
# reading warning rules from Box
bcrpp.core.warning.rules <- box_read(996103073482)
# apply bcrpp correction rules to data
core.data.changes <- changes_qc(rules = bcrpp.core.correction.rules,
data = core.data)
# applying warning rules to data that already has changes made to core data
core.data.qc <- warnings_qc(params =bcrpp.core.warning.rules,
data = core.data.changes)
gc()
gc()
